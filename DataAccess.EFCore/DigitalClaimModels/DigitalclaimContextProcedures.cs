// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using DataAccess.EFCore.DigitalClaimModels;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace DataAccess.EFCore.DigitalClaimModels
{
    public partial class DigitalclaimContext
    {
        private DigitalclaimContextProcedures _procedures;

        public virtual DigitalclaimContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new DigitalclaimContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public DigitalclaimContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<sp_InsertInvoiceLogFromIClaimResult>().HasNoKey().ToView(null);
        }
    }

    public interface IDigitalclaimContextProceduresContract
    {
        Task<int> sp_InsertInvoiceLogFromIClaimAsync(string flag, long? IdInvHd, long? IdIndDt, string AccNo, int? VictimNo, string UserIdLine, string IP, string RecordComment, CancellationToken cancellationToken = default);
    }

    public partial class DigitalclaimContextProcedures
    {
        private readonly DigitalclaimContext _context;

        public DigitalclaimContextProcedures(DigitalclaimContext context)
        {
            _context = context;
        }

        public virtual async Task<int> sp_InsertInvoiceLogFromIClaimAsync(string flag, long? IdInvHd, long? IdIndDt, string AccNo, int? VictimNo, string UserIdLine, string IP, string RecordComment, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "flag",
                    Size = 50,
                    Value = flag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdInvHd",
                    Value = IdInvHd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdIndDt",
                    Value = IdIndDt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AccNo",
                    Size = 20,
                    Value = AccNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VictimNo",
                    Value = VictimNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserIdLine",
                    Size = 50,
                    Value = UserIdLine ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IP",
                    Size = 50,
                    Value = IP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RecordComment",
                    Size = 200,
                    Value = RecordComment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_InsertInvoiceLogFromIClaim] @flag, @IdInvHd, @IdIndDt, @AccNo, @VictimNo, @UserIdLine, @IP, @RecordComment", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
