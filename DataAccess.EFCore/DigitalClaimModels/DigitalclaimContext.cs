// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace DataAccess.EFCore.DigitalClaimModels
{
    public partial class DigitalclaimContext : DbContext
    {
        public DigitalclaimContext()
        {
        }

        public DigitalclaimContext(DbContextOptions<DigitalclaimContext> options)
            : base(options)
        {
        }

        public virtual DbSet<HosDocumentReceive> HosDocumentReceive { get; set; }
        public virtual DbSet<IclaimApproval> IclaimApproval { get; set; }
        public virtual DbSet<IclaimApprovalStatus> IclaimApprovalStatus { get; set; }
        public virtual DbSet<IclaimApprovalStatusState> IclaimApprovalStatusState { get; set; }
        public virtual DbSet<IclaimCheckDocuments> IclaimCheckDocuments { get; set; }
        public virtual DbSet<IclaimCheckInvoiceDocuments> IclaimCheckInvoiceDocuments { get; set; }
        public virtual DbSet<Invoicehd> Invoicehd { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<HosDocumentReceive>(entity =>
            {
                entity.HasKey(e => new { e.AccNo, e.VictimNo, e.Appno, e.RunNo });

                entity.Property(e => e.AccNo).HasMaxLength(20);

                entity.Property(e => e.AccountName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AccountType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.BankBranch)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.BankId)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BookBankFileName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BookBankFilePath)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BranchId)
                    .HasColumnName("BranchID")
                    .HasMaxLength(10);

                entity.Property(e => e.CheckDate).HasColumnType("datetime");

                entity.Property(e => e.DueNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PaidImmediately)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PaymentType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ReceiveDate).HasColumnType("datetime");

                entity.Property(e => e.Regisdate).HasColumnType("datetime");

                entity.Property(e => e.TokenPrint)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransferDate).HasColumnType("datetime");

                entity.Property(e => e.UserId)
                    .HasColumnName("UserID")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<IclaimApproval>(entity =>
            {
                entity.HasKey(e => new { e.AccNo, e.VictimNo, e.AppNo })
                    .HasName("PK_HosApprovalStatus");

                entity.ToTable("IClaimApproval");

                entity.Property(e => e.AccNo)
                    .HasColumnName("AccNO")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BranchId)
                    .HasColumnName("BranchID")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.InsertDate).HasColumnType("datetime");

                entity.Property(e => e.LastUpdate).HasColumnType("datetime");

                entity.Property(e => e.LineId)
                    .HasColumnName("LineID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PayMore)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RecFname)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RecLname)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RecPrefix)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RecRelate)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.RecSocNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RevFname)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RevLname)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RevPrefix)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RevRelate)
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IclaimApprovalStatus>(entity =>
            {
                entity.HasKey(e => e.StatusId)
                    .HasName("PK_ApprovalStatus");

                entity.ToTable("IClaimApprovalStatus");

                entity.Property(e => e.StatusId).ValueGeneratedNever();

                entity.Property(e => e.StatusNameEclaim).HasMaxLength(50);

                entity.Property(e => e.StatusNameIclaim).HasMaxLength(50);
            });

            modelBuilder.Entity<IclaimApprovalStatusState>(entity =>
            {
                entity.HasKey(e => new { e.AccNo, e.VictimNo, e.AppNo, e.StateNo })
                    .HasName("PK_HosApprovalStatusState");

                entity.ToTable("IClaimApprovalStatusState");

                entity.Property(e => e.AccNo)
                    .HasColumnName("AccNO")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InsertDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<IclaimCheckDocuments>(entity =>
            {
                entity.HasKey(e => new { e.AccNo, e.VictimNo, e.AppNo })
                    .HasName("PK_HosDocumentCheck");

                entity.ToTable("IClaimCheckDocuments");

                entity.Property(e => e.AccNo)
                    .HasColumnName("AccNO")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BookbankComment)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.BookbankStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IdCardComment)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IdCardStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SumStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<IclaimCheckInvoiceDocuments>(entity =>
            {
                entity.HasKey(e => e.IdInvhd)
                    .HasName("PK_HosDocumentCheckInvoice");

                entity.ToTable("IClaimCheckInvoiceDocuments");

                entity.Property(e => e.IdInvhd)
                    .HasColumnName("id_invhd")
                    .ValueGeneratedNever();

                entity.Property(e => e.AccNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceComment)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ReceiptNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Invoicehd>(entity =>
            {
                entity.HasKey(e => e.IdInvhd);

                entity.ToTable("invoicehd");

                entity.Property(e => e.IdInvhd)
                    .HasColumnName("id_invhd")
                    .ValueGeneratedNever();

                entity.Property(e => e.AccNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Age).HasColumnName("age");

                entity.Property(e => e.An)
                    .HasColumnName("AN")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BookNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Consider)
                    .HasColumnName("consider")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Daybed).HasColumnName("daybed");

                entity.Property(e => e.Dispensedate)
                    .HasColumnName("dispensedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dispensetime)
                    .HasColumnName("dispensetime")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Hn)
                    .HasColumnName("HN")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Hosid)
                    .HasColumnName("hosid")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Hostype)
                    .HasColumnName("hostype")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdInvdt).HasColumnName("id_invdt");

                entity.Property(e => e.InputBy)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.InvoiceNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Maincomment)
                    .HasColumnName("maincomment")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Mainconsider)
                    .HasColumnName("mainconsider")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RecDate).HasColumnType("datetime");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.ReceiptNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RecordBy)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RecordDate).HasColumnType("datetime");

                entity.Property(e => e.Suminv).HasColumnName("suminv");

                entity.Property(e => e.Takendate)
                    .HasColumnName("takendate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Takentime)
                    .HasColumnName("takentime")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.VictimType)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Victimname)
                    .HasColumnName("victimname")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Vname)
                    .HasColumnName("vname")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}